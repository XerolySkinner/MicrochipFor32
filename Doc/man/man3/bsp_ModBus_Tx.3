.TH "bsp_ModBus_Tx" 3 "2022年 十一月 27日 星期日" "Version 2.0.0" "MF32BSP_XerolySkinner" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bsp_ModBus_Tx \- ModBus发送器  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <bsp_ModBus\&.h>\fP
.PP
被 \fBbsp_ModBus_STM32\fP 继承\&.
.SS "Public 成员函数"

.in +1c
.ti -1c
.RI "\fBbsp_ModBus_Tx\fP (\fBu8\fP \fBID\fP)"
.br
.ti -1c
.RI "void \fBReadKeepReg\fP (\fBu16\fP address, \fBu16\fP mem)"
.br
.RI "发送读取保存寄存器的指令 "
.ti -1c
.RI "void \fBReadInReg\fP (\fBu16\fP address, \fBu16\fP mem)"
.br
.RI "发送读取输入寄存器的指令 "
.ti -1c
.RI "void \fBWriteOneReg\fP (\fBu16\fP address, \fBu16\fP var)"
.br
.RI "发送写一个寄存器的指令 "
.ti -1c
.RI "void \fBWriteRegs\fP (\fBu16\fP address, \fBu16\fP mem, \fBu16\fP *var)"
.br
.RI "发送写多个寄存器的指令 "
.ti -1c
.RI "void \fBWriteRegsVar\fP (\fBu16\fP address, \fBu16\fP mem,\&.\&.\&.)"
.br
.RI "发送写多个寄存器的指令 "
.ti -1c
.RI "void \fBReadOutCoil\fP (\fBu16\fP address, \fBu16\fP mem)"
.br
.RI "发送读输出线圈的指令 "
.ti -1c
.RI "void \fBReadInCoil\fP (\fBu16\fP address, \fBu16\fP mem)"
.br
.RI "发送读输入线圈的指令 "
.ti -1c
.RI "void \fBWriteOneCoil\fP (\fBu16\fP address, \fBu16\fP state)"
.br
.RI "发送写入一个线圈的指令 "
.ti -1c
.RI "void \fBWriteCoils\fP (\fBu16\fP address, \fBu16\fP mem, \fBu8\fP *var)"
.br
.RI "发送写多个线圈的指令 "
.ti -1c
.RI "void \fBWriteCoilsVar\fP (\fBu16\fP address, \fBu16\fP mem,\&.\&.\&.)"
.br
.RI "发送写多个线圈的指令 "
.in -1c
.SS "Protected 成员函数"

.in +1c
.ti -1c
.RI "virtual void \fBTransmit\fP (\fBu8\fP *dat, \fBu16\fP len)=0"
.br
.in -1c
.SS "Protected 属性"

.in +1c
.ti -1c
.RI "\fBu8\fP \fBID\fP"
.br
.RI "器件ID "
.in -1c
.SH "详细描述"
.PP 
ModBus发送器 
.PP
在文件 \fBbsp_ModBus\&.h\fP 第 \fB58\fP 行定义\&.
.SH "构造及析构函数说明"
.PP 
.SS "bsp_ModBus_Tx::bsp_ModBus_Tx (\fBu8\fP ID)"

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB362\fP 行定义\&.
.SH "成员函数说明"
.PP 
.SS "void bsp_ModBus_Tx::ReadInCoil (\fBu16\fP address, \fBu16\fP mem)"

.PP
发送读输入线圈的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 读取的地址 
.br
\fImem\fP 读取的个数 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB195\fP 行定义\&.
.SS "void bsp_ModBus_Tx::ReadInReg (\fBu16\fP address, \fBu16\fP mem)"

.PP
发送读取输入寄存器的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 读取的地址 
.br
\fImem\fP 读取的个数 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB70\fP 行定义\&.
.SS "void bsp_ModBus_Tx::ReadKeepReg (\fBu16\fP address, \fBu16\fP mem)"

.PP
发送读取保存寄存器的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 读取的地址 
.br
\fImem\fP 读取的个数 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB50\fP 行定义\&.
.SS "void bsp_ModBus_Tx::ReadOutCoil (\fBu16\fP address, \fBu16\fP mem)"

.PP
发送读输出线圈的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 读取的地址 
.br
\fImem\fP 读取的个数 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB175\fP 行定义\&.
.SS "virtual void bsp_ModBus_Tx::Transmit (\fBu8\fP * dat, \fBu16\fP len)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
在 \fBbsp_ModBus_STM32\fP 内被实现\&.
.SS "void bsp_ModBus_Tx::WriteCoils (\fBu16\fP address, \fBu16\fP mem, \fBu8\fP * var)"

.PP
发送写多个线圈的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 写入的地址 
.br
\fImem\fP 写入的个数 
.br
\fI*var\fP 待写入数据的缓冲区 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP
\fB注解\fP
.RS 4
简单通信建议使用WriteCoilsVar 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB240\fP 行定义\&.
.SS "void bsp_ModBus_Tx::WriteCoilsVar (\fBu16\fP address, \fBu16\fP mem,  \&.\&.\&.)"

.PP
发送写多个线圈的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 写入的地址 
.br
\fImem\fP 写入的个数 
.br
\fIvar\fP 写入的数据 根据mem的数量决定此处数量 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB268\fP 行定义\&.
.SS "void bsp_ModBus_Tx::WriteOneCoil (\fBu16\fP address, \fBu16\fP state)"

.PP
发送写入一个线圈的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 写入的地址 
.br
\fIstate\fP 写入的状态 0:复位 其他:置位 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB217\fP 行定义\&.
.SS "void bsp_ModBus_Tx::WriteOneReg (\fBu16\fP address, \fBu16\fP var)"

.PP
发送写一个寄存器的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 写入的地址 
.br
\fIvar\fP 写入的值 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB90\fP 行定义\&.
.SS "void bsp_ModBus_Tx::WriteRegs (\fBu16\fP address, \fBu16\fP mem, \fBu16\fP * var)"

.PP
发送写多个寄存器的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 写入的地址 
.br
\fImem\fP 写入的个数 
.br
\fI*var\fP 待写入数据的缓冲区 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP
\fB注解\fP
.RS 4
简单通信建议使用WriteRegsVar 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB112\fP 行定义\&.
.SS "void bsp_ModBus_Tx::WriteRegsVar (\fBu16\fP address, \fBu16\fP mem,  \&.\&.\&.)"

.PP
发送写多个寄存器的指令 
.PP
\fB参数\fP
.RS 4
\fIaddress\fP 写入的地址 
.br
\fImem\fP 写入的个数 
.br
\fIvar\fP 写入的数据 根据mem的数量决定此处数量 
.RE
.PP
\fB返回\fP
.RS 4
无返回值 
.RE
.PP

.PP
在文件 \fBbsp_ModBus\&.cpp\fP 第 \fB142\fP 行定义\&.
.SH "类成员变量说明"
.PP 
.SS "\fBu8\fP bsp_ModBus_Tx::ID\fC [protected]\fP"

.PP
器件ID 
.PP
在文件 \fBbsp_ModBus\&.h\fP 第 \fB76\fP 行定义\&.

.SH "作者"
.PP 
由 Doyxgen 通过分析 MF32BSP_XerolySkinner 的 源代码自动生成\&.
